1.	Что может пойти не так при работе со следующим кодом на языке C:
	char * getErrorStr(int err_code) {
		char * result = "unknown";
		switch(err_code) {
			case 1:
				result="bad data";
				break;
			// …
		} 
		return result;
	}

Переменная result это указатель на строковую константу для которой выделяется 7 байт + 1 байт на нулевой символ окончания строки, а в switch ей присваевается строка размером 8 байт + 1 байт, следовательно 1 байт займет место не предназначеное для этой константы, что может привести к непредсказуемым последствиям.

2.	Написать функцию, которая вычисляет значение полинома в точке. Функция используется следующим образом:
	polynom(x, 2, A,B) возвращает  A*x+B
	polynom(x, 3,  A, B, C) возвращает A*x^2 + B*x +C
	polynom(x, 4, A, B, C, D) возвращает A*x^3 + B*x^2 + C*x + D
	и т.д.

Код на https://github.com/MikeTar/ZADACHA/blob/master/ZADACHA/Polynom.cpp

3.	Как запретить создание объекта класса? Как обеспечить то, чтобы было возможно создавать только один объект заданного класса. Написать пример на C++.

class some_class
{
	some_class();// По умолчанию все члены класс являются private следовательно конструктор класса не доступен и невозможно создать объекта класса.

}

class some_class1
{
	static int count = 0;
public:
	some_class1()
	{
		if(count>1) throw "Can not make more than one object"
// брасаем исключение при попытке создать более одного объекта класса
		++count;
	};

}// По умолчанию все члены класс являются private следовательно конструктор класса не доступен и невозможно создать объекта класса.

4.	В произвольном проекте используются функции catchRes() и releaseRes() для захвата и освобождения некоторого ценного единичного системного ресурса. Написать такую "надстройку" C++ над этими функциями чтобы захват ресурса мог быть произведен в начале функции одной строчкой, а освобождение ресурса происходило при выходе из функции без каких-либо дополнительных действий. Обеспечить потокозащищенность (любой известный примитив синхронизации).

class useRes
{
public:
	useRes(){catchRes();};
	~useRes(){releaseRes();};
}

some_func(params)
{
	useRes res;
	mutex_lock( &res->mutex);	
		// что-то происходит с ресурсом
	mutex_unlock( &res->mutex);	
}// Привыходе вызывается деструктор класса useRes и ресурс освобождается

5.	Написать класс для представления дробного числа в виде числителя и знаменателя. Написать операторы сложения/вычитания/умножения/сравнения для таких чисел. Следить за тем, чтобы дробь всегда имела оптимальное представление в числителе и знаменателе (например не 6/8, а 3/4). Предусмотреть метод (конструктор), находящий ближайшее дробное число к иррациональному, представленному в виде числа с плавающей точкой.

Код на https://github.com/MikeTar/ZADACHA/tree/master/ZADACHA файлы: Fraction.cpp и Fraction.h

6.	Написать функцию вычисления синуса double sin() для чисел из предыдущей задачи, используя ряд и как можно более позднее приведение к числам с плавающей точкой.

Код на https://github.com/MikeTar/ZADACHA/blob/master/ZADACHA/Sin.cpp